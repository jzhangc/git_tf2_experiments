"""utilities for plots"""

# ------ modules ------
import os
import numpy as np
import matplotlib.pyplot as plt
from utils.other_utils import warn
from tensorflow.python.keras.callbacks import History


# ----- functions ------
def epochsPlot(model_history,
               file=None,
               loss_var='loss', val_loss_var='val_loss',
               accuracy_var=None, val_accuracy_var=None,
               plot_title_loss='Loss', plot_title_acc='Accuracy',
               figure_size=(5, 5)):
    """
    # Purpose\n
        The plot function for epoch history from LSTM modelling\n
    # Arguments\n
        model_history: keras.callbacks.History. Keras modelling history object, generated by model.fit process.\n
        file: string or None. (optional) Directory and file name to save the figure. Use os.path.join() to generate.\n
        loss_var: string. Variable name for loss in the model history.\n
        plot_title: string. Plot title.\n
        xlabel: string. X-axis title.\n
        ylabel: string. Y-axis title.\n
        figure_size: float in two-tuple/list. Figure size.\n
    # Return\n
        The function returns a pdf figure file to the set directory and with the set file name\n
    # Details\n
        - The loss_var and accuracy_var are keys in the history.history object.\n
    """
    # -- argument check --
    if not isinstance(model_history, History):
        raise TypeError('model_history needs to be a keras History object."')

    if not all(hist_key in model_history.history for hist_key in [loss_var, val_loss_var]):
        raise ValueError(
            'Make sure both loss_var and val_loss_var exist in model_history.')

    if all(acc is not None for acc in [accuracy_var, val_accuracy_var]):
        if not all(hist_key in model_history.history for hist_key in [accuracy_var, val_accuracy_var]):
            raise ValueError(
                'Make sure both accuracy_var and val_accuracy_var exist in model_history.')
        else:
            acc_plot = True
    elif any(acc is not None for acc in [accuracy_var, val_accuracy_var]):
        try:
            raise ValueError
        except ValueError as e:
            warn('Only one of accuracy_var, val_accuracy_var are set.',
                 'Proceed with only loss plot.')
        finally:
            acc_plot = False
    else:
        acc_plot = False

    # -- prepare data --
    plot_loss = np.array(model_history.history[loss_var])  # RMSE
    plot_val_loss = np.array(model_history.history[val_loss_var])  # RMSE
    plot_x = np.arange(1, len(plot_loss) + 1)

    if acc_plot:
        plot_acc = np.sqrt(
            np.array(model_history.history[accuracy_var]))  # RMSE
        plot_val_acc = np.array(
            model_history.history[val_accuracy_var])  # RMSE

    # -- plotting --
    if acc_plot:  # two plots
        fig, ax = plt.subplots(1, 2, figsize=(15, 5))
        ax[0].plot(plot_x, plot_loss, linestyle='-',
                   color='blue', label='train')
        ax[0].plot(plot_x, plot_val_loss, linestyle='-',
                   color='red', label='validation')
        ax[0].set_facecolor('white')
        ax[0].set_title(plot_title_loss, color='black')
        ax[0].set_xlabel('Epoch', fontsize=10, color='black')
        ax[0].set_ylabel('Loss', fontsize=10, color='black')
        ax[0].legend()
        ax[0].tick_params(labelsize=5, color='black', labelcolor='black')

        ax[1].plot(plot_x, plot_acc, linestyle='-',
                   color='blue', label='train')
        ax[1].plot(plot_x, plot_val_acc, linestyle='-',
                   color='red', label='validation')
        ax[1].set_facecolor('white')
        ax[1].set_title(plot_title_acc, color='black')
        ax[1].set_xlabel('Epoch', fontsize=10, color='black')
        ax[1].set_ylabel('Accuracy', fontsize=10, color='black')
        ax[1].legend()
        ax[1].tick_params(labelsize=5, color='black', labelcolor='black')

        plt.setp(ax[0].spines.values(), color='black')
        plt.setp(ax[1].spines.values(), color='black')
    else:
        fig, ax = plt.subplots(figsize=figure_size)
        ax.plot(plot_x, plot_loss, linestyle='-', color='blue', label='train')
        ax.plot(plot_x, plot_val_loss, linestyle='-',
                color='red', label='validation')
        ax.set_facecolor('white')
        ax.set_title(plot_title_loss, color='black')
        ax.set_xlabel('Epoch', fontsize=10, color='black')
        ax.set_ylabel('Accuracy', fontsize=10, color='black')
        ax.legend()
        ax.tick_params(labelsize=5, color='black', labelcolor='black')

        plt.setp(ax.spines.values(), color='black')

    fig.set_facecolor('white')
    fig

    # - save output -
    if file is not None:
        full_path = os.path.normpath(os.path.abspath(os.path.expanduser(file)))
        if not os.path.isfile(full_path):
            raise ValueError('Invalid input file or input file not found.')
        else:
            plt.savefig(full_path, dpi=600,
                        bbox_inches='tight', facecolor='white')

    return fig, ax
